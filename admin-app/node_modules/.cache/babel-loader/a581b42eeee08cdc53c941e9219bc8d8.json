{"ast":null,"code":"import axios from \"../helpers/axios\";\nimport { authConstants } from \"./constants\";\nexport const login = user => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(\"/admin/signin\", { ...user\n    });\n\n    if (res.status === 200) {\n      const {\n        token,\n        user\n      } = res.data;\n      localStorage.setItem(\"token\", token);\n      localStorage.setItem(\"user\", JSON.stringify(user));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};\nexport const isUserLoggedIn = () => {\n  return async dispatch => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      const user = JSON.parse(localStorage.getItem(\"user\"));\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      dispatch({\n        type: authConstants.LOGIN_FAILURE,\n        payload: {\n          error: \"Failed to login\"\n        }\n      });\n    }\n  };\n};\nexport const signout = () => {\n  return async dispatch => {\n    localStorage.clear();\n    dispatch({\n      type: authConstants.LOGOUT_REQUEST\n    });\n  };\n};\nexport const signup = user => {\n  return async dispatch => {\n    dispatch({\n      type: authConstants.LOGIN_REQUEST\n    });\n    const res = await axios.post(\"/admin/signup\", { ...user\n    });\n\n    if (res.status === 201) {\n      const {\n        message\n      } = res.data;\n      dispatch({\n        type: authConstants.LOGIN_SUCCESS,\n        payload: {\n          token,\n          user\n        }\n      });\n    } else {\n      if (res.status === 400) {\n        dispatch({\n          type: authConstants.LOGIN_FAILURE,\n          payload: {\n            error: res.data.error\n          }\n        });\n      }\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/Praveen Kariyawasam/Documents/PROJECTS/E-Commerce - Project/mern-ecommerce/admin-app/src/actions/auth.actions.js"],"names":["axios","authConstants","login","user","dispatch","type","LOGIN_REQUEST","res","post","status","token","data","localStorage","setItem","JSON","stringify","LOGIN_SUCCESS","payload","LOGIN_FAILURE","error","isUserLoggedIn","getItem","parse","signout","clear","LOGOUT_REQUEST","signup","message"],"mappings":"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","sourcesContent":["import axios from \"../helpers/axios\";\r\nimport { authConstants } from \"./constants\";\r\n\r\nexport const login = (user) => {\r\n  return async (dispatch) => {\r\n    dispatch({ type: authConstants.LOGIN_REQUEST });\r\n    const res = await axios.post(\"/admin/signin\", {\r\n      ...user,\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      const { token, user } = res.data;\r\n      localStorage.setItem(\"token\", token);\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n    } else {\r\n      if (res.status === 400) {\r\n        dispatch({\r\n          type: authConstants.LOGIN_FAILURE,\r\n          payload: { error: res.data.error },\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nexport const isUserLoggedIn = () => {\r\n  return async (dispatch) => {\r\n    const token = localStorage.getItem(\"token\");\r\n    if (token) {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n      dispatch({\r\n        type: authConstants.LOGIN_SUCCESS,\r\n        payload: {\r\n          token,\r\n          user,\r\n        },\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: authConstants.LOGIN_FAILURE,\r\n        payload: { error: \"Failed to login\" },\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const signout = () => {\r\n  return async dispatch => {\r\n    localStorage.clear();\r\n    dispatch({\r\n        type:authConstants.LOGOUT_REQUEST,\r\n    });\r\n  };\r\n};\r\n\r\nexport const signup = (user) => {\r\n    return async (dispatch) => {\r\n      dispatch({ type: authConstants.LOGIN_REQUEST });\r\n      const res = await axios.post(\"/admin/signup\", {\r\n        ...user,\r\n      });\r\n  \r\n      if (res.status === 201) {\r\n        const { message } = res.data;\r\n        dispatch({\r\n          type: authConstants.LOGIN_SUCCESS,\r\n          payload: {\r\n            token,\r\n            user,\r\n          },\r\n        });\r\n      } else {\r\n        if (res.status === 400) {\r\n          dispatch({\r\n            type: authConstants.LOGIN_FAILURE,\r\n            payload: { error: res.data.error },\r\n          });\r\n        }\r\n      }\r\n    };\r\n  };"]},"metadata":{},"sourceType":"module"}